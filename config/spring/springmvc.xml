<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
	
	<!-- 对静态资源访问 -->
	<mvc:resources location="/js/" mapping="/js/**"/>
	<mvc:resources location="/css/" mapping="/css/**"/>
	<mvc:resources location="/images/" mapping="/images/**"/>
	
	<!-- 配置注解的handler -->
	<!-- 对于注解的handler可单个配置
		也可使用组件扫描批量配置 ，实际开发中一般用组件扫描
	-->
	
	<!-- 组件扫描配置 -->
	<context:component-scan base-package="com.ssm.controller"></context:component-scan>
	
	<!-- 注解处理器映射器 和 注解处理器适配器 必须配对使用，不能一个非注解的一个注解的-->
	<!-- 
		使用 mvc:annotation-driven 可替代注解处理器映射器和注解处理器适配器
		同时，mvc:annotation-driven 默认还加载了很多参数绑定方法，比如json转换解析器就默认加载了
		即，如果使用了 mvc:annotation-driven 就不用配置上面的注解处理器映射器和注解处理器适配器了
		建议使用，使用开发也用  mvc:annotation-driven 。
	 -->
	<mvc:annotation-driven 
		conversion-service="conversionService" 
		validator="validator">
	</mvc:annotation-driven>
	
	<!-- 视图解析器 
		解析jsp解析，默认使用jstl标签，需要使用jstl包
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- 后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 自定义转换器 -->
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<bean class="com.ssm.controller.converter.CustomDateConverter"/>
			</list>
		</property>
	</bean>
	
	<!-- 校验器 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 校验器-->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名-->
		<property name="basenames">   
       	 <list>    
            <value>classpath:CustomValidationMessages</value> 
       	 </list>   
    	</property>
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
		<!-- 对资源文件内容缓存时间，单位秒 -->
		<property name="cacheSeconds" value="120" />
	</bean>
	
	<!-- 全局异常处理器 -->
	<bean id="handlerExceptionResolver" class="com.ssm.controller.exceptionresolver.CustomExceptionResolver"/>
	
	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为10MB -->
		<property name="maxUploadSize">
			<value>10485760</value>
		</property>
	</bean>
	
	<!-- 拦截器  -->
	<mvc:interceptors>
		<!-- 配置拦截器方式一 -->
		<!-- <bean class="com.ssm.interceptor.HandlerInterceptor1"></bean> -->
		
		<!-- 配置拦截器方式二 -->
		<!--多个拦截器,顺序执行 -->
		<!-- "/**" 表示所有的url路径包括子url路径
		"/*" 表示所有的url路径
		 -->
		<mvc:interceptor>
			<!-- 拦截哪些URL -->
			<mvc:mapping path="/**"/>
			<!-- 哪些URL不拦截 -->
			<mvc:exclude-mapping path="/toLogin.action"/>
			<!-- 全局拦截器 -->
			<bean class="com.ssm.interceptor.HandlerInterceptor1"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/toLogin.action"/>
			<bean class="com.ssm.interceptor.HandlerInterceptor2"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
</beans>